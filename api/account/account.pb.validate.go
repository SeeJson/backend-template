// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: account.proto

package account

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on ReqAddOperation with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ReqAddOperation) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		return ReqAddOperationValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
	}

	if m.GetModuleId() <= 0 {
		return ReqAddOperationValidationError{
			field:  "ModuleId",
			reason: "value must be greater than 0",
		}
	}

	if utf8.RuneCountInString(m.GetDesc()) < 1 {
		return ReqAddOperationValidationError{
			field:  "Desc",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// ReqAddOperationValidationError is the validation error returned by
// ReqAddOperation.Validate if the designated constraints aren't met.
type ReqAddOperationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReqAddOperationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReqAddOperationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReqAddOperationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReqAddOperationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReqAddOperationValidationError) ErrorName() string { return "ReqAddOperationValidationError" }

// Error satisfies the builtin error interface
func (e ReqAddOperationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReqAddOperation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReqAddOperationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReqAddOperationValidationError{}

// Validate checks the field values on RspAddOperation with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RspAddOperation) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RspAddOperationValidationError is the validation error returned by
// RspAddOperation.Validate if the designated constraints aren't met.
type RspAddOperationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RspAddOperationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RspAddOperationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RspAddOperationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RspAddOperationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RspAddOperationValidationError) ErrorName() string { return "RspAddOperationValidationError" }

// Error satisfies the builtin error interface
func (e RspAddOperationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRspAddOperation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RspAddOperationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RspAddOperationValidationError{}

// Validate checks the field values on Platform with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Platform) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Priority

	// no validation rules for SysPreset

	// no validation rules for CreateTime

	return nil
}

// PlatformValidationError is the validation error returned by
// Platform.Validate if the designated constraints aren't met.
type PlatformValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatformValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatformValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatformValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatformValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatformValidationError) ErrorName() string { return "PlatformValidationError" }

// Error satisfies the builtin error interface
func (e PlatformValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatform.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatformValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatformValidationError{}

// Validate checks the field values on ReqGetsPlatform with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ReqGetsPlatform) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ReqGetsPlatformValidationError is the validation error returned by
// ReqGetsPlatform.Validate if the designated constraints aren't met.
type ReqGetsPlatformValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReqGetsPlatformValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReqGetsPlatformValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReqGetsPlatformValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReqGetsPlatformValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReqGetsPlatformValidationError) ErrorName() string { return "ReqGetsPlatformValidationError" }

// Error satisfies the builtin error interface
func (e ReqGetsPlatformValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReqGetsPlatform.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReqGetsPlatformValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReqGetsPlatformValidationError{}

// Validate checks the field values on RspGetsPlatform with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RspGetsPlatform) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RspGetsPlatformValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RspGetsPlatformValidationError is the validation error returned by
// RspGetsPlatform.Validate if the designated constraints aren't met.
type RspGetsPlatformValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RspGetsPlatformValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RspGetsPlatformValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RspGetsPlatformValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RspGetsPlatformValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RspGetsPlatformValidationError) ErrorName() string { return "RspGetsPlatformValidationError" }

// Error satisfies the builtin error interface
func (e RspGetsPlatformValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRspGetsPlatform.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RspGetsPlatformValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RspGetsPlatformValidationError{}
